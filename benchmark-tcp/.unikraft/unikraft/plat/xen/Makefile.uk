XEN_INTERFACE_VERSION := 0x00030205

##
## Xen platform registration
##
$(eval $(call addplat_s,xen,$(CONFIG_PLAT_XEN)))

##
## Xen platform library registration
##
$(eval $(call addplatlib,xen,libxenplat))
$(eval $(call addplatlib_s,xen,libxenpvcalls,$(CONFIG_XEN_PVCALLS)))

##
## Xen platform compilation settings
##
# TODO: For now, we set the Xen interface options here. These options are
#       picked up by `libxenheaders` and thereby have an influence on the
#       Xen drivers (e.g., XenBus, netfront).
#       With the re-structuring of the Xen platform library, we should find a
#       a better place for this: probably with a Xen boot/entry driver.
ASFLAGS-$(CONFIG_PLAT_XEN)  += -D__XEN_INTERFACE_VERSION__=$(XEN_INTERFACE_VERSION)
CFLAGS-$(CONFIG_PLAT_XEN)   += -D__XEN_INTERFACE_VERSION__=$(XEN_INTERFACE_VERSION)
CXXFLAGS-$(CONFIG_PLAT_XEN) += -D__XEN_INTERFACE_VERSION__=$(XEN_INTERFACE_VERSION)
ifeq ($(CONFIG_ARCH_ARM_64), y)
CFLAGS-$(CONFIG_PLAT_XEN)   += -DXEN_HAVE_PV_GUEST_ENTRY
endif

LIBXENPLAT_ASFLAGS-y     += -DXENPLAT
LIBXENPLAT_CFLAGS-y      += -DXENPLAT
LIBXENPLAT_CXXFLAGS-y    += -DXENPLAT

LIBXENPLAT_ASFLAGS-y     += -DUK_USE_SECTION_SEGMENTS
LIBXENPLAT_CFLAGS-y      += -DUK_USE_SECTION_SEGMENTS
LIBXENPLAT_CXXFLAGS-y    += -DUK_USE_SECTION_SEGMENTS

##
## Default Linker script
ifeq ($(CONFIG_ARCH_X86_64),y)
UK_PLAT_XEN_DEF_LDS            := $(CONFIG_UK_BASE)/plat/xen/x86/link64.lds.S
else
ifeq ($(CONFIG_ARCH_ARM_32),y)
UK_PLAT_XEN_DEF_LDS            := $(CONFIG_UK_BASE)/plat/xen/arm/link32.lds.S
else
ifeq ($(CONFIG_ARCH_ARM_64),y)
UK_PLAT_XEN_DEF_LDS            := $(CONFIG_UK_BASE)/plat/xen/arm/link64.lds.S
endif
endif
endif

##
## Platform library definitions
##
# TODO: We intend to decompose(re-arch) the `libxenplat` library into
#       individual driver libraries (e.g., CPU, memory). With this in place
#       we aim a cleaner organization of these headers.
# NOTE: We globally export these header includes because they are currently
#       forming the API of `libxenplat`.
ASINCLUDES-$(CONFIG_PLAT_XEN)        += -I$(LIBXENPLAT_BASE)/include
ASINCLUDES-$(CONFIG_PLAT_XEN)        += -I$(UK_PLAT_COMMON_BASE)/include
CINCLUDES-$(CONFIG_PLAT_XEN)         += -I$(LIBXENPLAT_BASE)/include
CINCLUDES-$(CONFIG_PLAT_XEN)         += -I$(UK_PLAT_COMMON_BASE)/include
CINCLUDES-$(CONFIG_PLAT_XEN)         += -I$(UK_PLAT_DRIVERS_BASE)/include

LIBXENPLAT_SRCS-y              += $(UK_PLAT_XEN_DEF_LDS)
LIBXENPLAT_SRCS-y              += $(LIBXENPLAT_BASE)/hypervisor.c
LIBXENPLAT_SRCS-y              += $(LIBXENPLAT_BASE)/memory.c
LIBXENPLAT_SRCS-y              += $(LIBXENPLAT_BASE)/io.c
LIBXENPLAT_SRCS-y              += $(UK_PLAT_COMMON_BASE)/lcpu.c|common
LIBXENPLAT_SRCS-y              += $(UK_PLAT_COMMON_BASE)/memory.c|common
LIBXENPLAT_SRCS-y              += $(UK_PLAT_COMMON_BASE)/tls.c|common

LIBXENPLAT_SRCS-y                += $(UK_PLAT_COMMON_BASE)/bootinfo.c|common
LIBXENPLAT_SRCS-$(CONFIG_LIBFDT) += $(UK_PLAT_COMMON_BASE)/bootinfo_fdt.c|common
LIBXENPLAT_SRCS-y                += $(UK_PLAT_COMMON_BASE)/bootinfo.lds.S|common

LIBXENPLAT_SRCS-$(CONFIG_ARCH_X86_64) += $(UK_PLAT_COMMON_BASE)/x86/trace.c|common
LIBXENPLAT_SRCS-$(CONFIG_ARCH_X86_64) += $(UK_PLAT_COMMON_BASE)/x86/traps.c|common
LIBXENPLAT_SRCS-$(CONFIG_ARCH_X86_64) += $(LIBXENPLAT_BASE)/x86/setup.c
LIBXENPLAT_SRCS-$(CONFIG_ARCH_X86_64) += $(LIBXENPLAT_BASE)/x86/traps.c
LIBXENPLAT_SRCS-$(CONFIG_ARCH_X86_64) += $(LIBXENPLAT_BASE)/x86/entry64.S
LIBXENPLAT_SRCS-$(CONFIG_ARCH_X86_64) += $(LIBXENPLAT_BASE)/x86/mm.c
LIBXENPLAT_SRCS-$(CONFIG_ARCH_X86_64) += $(LIBXENPLAT_BASE)/x86/arch_events.c
LIBXENPLAT_SRCS-$(CONFIG_ARCH_X86_64) += $(LIBXENPLAT_BASE)/x86/arch_time.c

ifneq ($(CONFIG_XEN_HVMLITE),y)
# NOTE: Compile flag needed for being able to correctly use `libxenplat`
#       headers: xen-x86/irq.h, xen-x86/mm.h
ASFLAGS-$(CONFIG_PLAT_XEN)            += -DXEN_PARAVIRT
CFLAGS-$(CONFIG_PLAT_XEN)             += -DXEN_PARAVIRT
LIBXENPLAT_SRCS-$(CONFIG_ARCH_X86_64) += $(LIBXENPLAT_BASE)/x86/cpu_pv.c
else
LIBXENPLAT_SRCS-$(CONFIG_ARCH_X86_64) += $(UK_PLAT_COMMON_BASE)/x86/cpu_native.c
LIBXENPLAT_SRCS-$(CONFIG_ARCH_ARM_32) += $(UK_PLAT_COMMON_BASE)/arm/cpu_native.c
LIBXENPLAT_SRCS-$(CONFIG_ARCH_ARM_64) += $(UK_PLAT_COMMON_BASE)/arm/cpu_native.c
endif

LIBXENPLAT_SRCS-$(CONFIG_ARCH_ARM_32) += $(LIBXENPLAT_BASE)/arm/setup.c
LIBXENPLAT_SRCS-$(CONFIG_ARCH_ARM_32) += $(LIBXENPLAT_BASE)/arm/traps.c
LIBXENPLAT_SRCS-$(CONFIG_ARCH_ARM_32) += $(LIBXENPLAT_BASE)/arm/entry32.S
LIBXENPLAT_SRCS-$(CONFIG_ARCH_ARM_32) += $(LIBXENPLAT_BASE)/arm/arch_events.c
LIBXENPLAT_SRCS-$(CONFIG_ARCH_ARM_32) += $(LIBXENPLAT_BASE)/arm/arch_time.c
LIBXENPLAT_SRCS-$(CONFIG_ARCH_ARM_32) += $(LIBXENPLAT_BASE)/arm/hypercalls32.S

LIBXENPLAT_SRCS-$(CONFIG_ARCH_ARM_64) += $(LIBXENPLAT_BASE)/arm/setup64.c
LIBXENPLAT_SRCS-$(CONFIG_ARCH_ARM_64) += $(LIBXENPLAT_BASE)/arm/entry64.S
LIBXENPLAT_SRCS-$(CONFIG_ARCH_ARM_64) += $(LIBXENPLAT_BASE)/arm/arch_events.c
LIBXENPLAT_SRCS-$(CONFIG_ARCH_ARM_64) += $(LIBXENPLAT_BASE)/arm/mm.c
LIBXENPLAT_SRCS-$(CONFIG_ARCH_ARM_64) += $(LIBXENPLAT_BASE)/arm/hypercalls64.S
LIBXENPLAT_SRCS-$(CONFIG_ARCH_ARM_64) += $(UK_PLAT_COMMON_BASE)/arm/lcpu.c|arm64_common
LIBXENPLAT_SRCS-$(CONFIG_ARCH_ARM_64) += $(UK_PLAT_COMMON_BASE)/arm/traps_arm64.c
LIBXENPLAT_SRCS-$(CONFIG_ARCH_ARM_64) += $(UK_PLAT_COMMON_BASE)/arm/time.c
LIBXENPLAT_SRCS-$(CONFIG_ARCH_ARM_64) += $(UK_PLAT_COMMON_BASE)/arm/generic_timer.c

ifeq ($(CONFIG_FPSIMD),y)
LIBXENPLAT_SRCS-$(CONFIG_ARCH_ARM_64) += $(UK_PLAT_COMMON_BASE)/arm/fp_arm64.c
endif
ifeq ($(CONFIG_HAVE_SMP),y)
LIBXENPLAT_SRCS-$(CONFIG_ARCH_ARM_64) += $(UK_PLAT_COMMON_BASE)/arm/lcpu_start.S
endif

LIBXENPLAT_SRCS-y              += $(LIBXENPLAT_BASE)/lcpu.c
LIBXENPLAT_SRCS-y              += $(LIBXENPLAT_BASE)/shutdown.c
LIBXENPLAT_SRCS-y              += $(LIBXENPLAT_BASE)/events.c
